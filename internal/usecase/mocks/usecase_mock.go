// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/usecase_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sanyarise/smurl/internal/models"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsecase) Create(ctx context.Context, longUrl string) (*models.Smurl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, longUrl)
	ret0, _ := ret[0].(*models.Smurl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUsecaseMockRecorder) Create(ctx, longUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsecase)(nil).Create), ctx, longUrl)
}

// FindURL mocks base method.
func (m *MockUsecase) FindURL(ctx context.Context, smallUrl string) (*models.Smurl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindURL", ctx, smallUrl)
	ret0, _ := ret[0].(*models.Smurl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindURL indicates an expected call of FindURL.
func (mr *MockUsecaseMockRecorder) FindURL(ctx, smallUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindURL", reflect.TypeOf((*MockUsecase)(nil).FindURL), ctx, smallUrl)
}

// ReadStat mocks base method.
func (m *MockUsecase) ReadStat(ctx context.Context, adminUrl string) (*models.Smurl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStat", ctx, adminUrl)
	ret0, _ := ret[0].(*models.Smurl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStat indicates an expected call of ReadStat.
func (mr *MockUsecaseMockRecorder) ReadStat(ctx, adminUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStat", reflect.TypeOf((*MockUsecase)(nil).ReadStat), ctx, adminUrl)
}

// UpdateStat mocks base method.
func (m *MockUsecase) UpdateStat(ctx context.Context, updatedSmurl models.Smurl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStat", ctx, updatedSmurl)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStat indicates an expected call of UpdateStat.
func (mr *MockUsecaseMockRecorder) UpdateStat(ctx, updatedSmurl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStat", reflect.TypeOf((*MockUsecase)(nil).UpdateStat), ctx, updatedSmurl)
}
