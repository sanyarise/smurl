// Package routeropenapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package routeropenapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ApiSmurl defines model for ApiSmurl.
type ApiSmurl struct {
	AdminUrl string  `json:"admin_url"`
	Count    *string `json:"count,omitempty"`
	IpInfo   *string `json:"ip_info,omitempty"`
	LongUrl  string  `json:"long_url"`
	SmallUrl string  `json:"small_url"`
}

// PostCreateJSONBody defines parameters for PostCreate.
type PostCreateJSONBody ApiSmurl

// PostStatJSONBody defines parameters for PostStat.
type PostStatJSONBody ApiSmurl

// PostCreateJSONRequestBody defines body for PostCreate for application/json ContentType.
type PostCreateJSONRequestBody PostCreateJSONBody

// PostStatJSONRequestBody defines body for PostStat for application/json ContentType.
type PostStatJSONRequestBody PostStatJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Home page
	// (GET /)
	Get(w http.ResponseWriter, r *http.Request)
	// Create small url
	// (POST /create)
	PostCreate(w http.ResponseWriter, r *http.Request)
	// Get statistic
	// (POST /stat)
	PostStat(w http.ResponseWriter, r *http.Request)
	// Redirect
	// (GET /{small_url})
	GetSmallUrl(w http.ResponseWriter, r *http.Request, smallUrl string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// Get operation middleware
func (siw *ServerInterfaceWrapper) Get(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Get(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostCreate operation middleware
func (siw *ServerInterfaceWrapper) PostCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCreate(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostStat operation middleware
func (siw *ServerInterfaceWrapper) PostStat(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostStat(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSmallUrl operation middleware
func (siw *ServerInterfaceWrapper) GetSmallUrl(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "small_url" -------------
	var smallUrl string

	err = runtime.BindStyledParameter("simple", false, "small_url", chi.URLParam(r, "small_url"), &smallUrl)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "small_url", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSmallUrl(w, r, smallUrl)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/", wrapper.Get)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/create", wrapper.PostCreate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/stat", wrapper.PostStat)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{small_url}", wrapper.GetSmallUrl)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xVS2/bPBD8K8R+31GI3NdFt7Qo0qCHBnF7CoKAoTYOC/HR3ZUBw9B/L5ZKHNmWjw16",
	"6MWg9zEczqzXW3Ap5BQxCkOzBXaPGGw5nme/DD11es6UMpJ4LBnbBh/vnlKyyQgNsJCPKxgqcKmPMpvx",
	"+c7HhzSb61JcnYTkYLvuRHaogPBX7wlbaG4mpdWE5wT/dtCWZx4tsiOfxacIDVx/Xn4351eXRpJxKa6R",
	"xGij6alj46Mp6OUbVCBeusIkjFeskXjEeXO2OFso8ZQx2uyhgXclVEG28lhErPVjhXLM4ksKaLJdIRQA",
	"shq/bKGBCxTQ53JOkUcv3i4Wxwjfvurl7+dS97Y1qheyaM2HuRofBSnazjDSGskgUaKiNPchWNrskdR4",
	"7QitYBmVxDNv+lTyL/odPe0qsYxFMBqKLB9Tu1Eol6LgOFM258670lb/ZIV+nlk9/U/4AA38V78Mdf00",
	"0fVunIv/++wUydzrbdNhEupxmJf7jzN6BQePLClGslg5beMFitEKz+LdrIdL7f/n4Ks4uO9GsW+723/D",
	"yf1yja0ndDK3Xpba/qP8PrMlG1CQGJqbQ4zpmvUa0L0GFUQb8CC9b0c1kfZwk9/+JbttJ1CxdSwcRSh/",
	"QVDDcDv8DgAA//8y/1p5OgcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
